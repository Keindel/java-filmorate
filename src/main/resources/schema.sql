create type if not exists AgeRating as enum (
    'G',
    'PG',
    'PG13',
    'R',
    'NC17'
    );

create type if not exists FriendshipStatus as enum (
    'INCOMING_REQUEST',
    'REQUEST_SENT',
    'APPROVED'
    );

create type if not exists Genre as enum (
    'комедия',
    'драма',
    'мультфильм',
    'триллер',
    'документальный',
    'боевик'
    );

create table if not exists users
(
    user_id  int generated by default as identity primary key,
    email    varchar(50),
    login    varchar(30),
    name     varchar(30),
    birthday date
);

create table if not exists films
(
    film_id      int generated by default as identity primary key,
    name         varchar(50) not null,
    description  varchar(200) not null,
    release_date date not null,
    duration     int CHECK (duration > 1),
    age_rating   AgeRating
);

create table if not exists friendship_status
(
    status_id   int generated by default as identity primary key,
    status_name FriendshipStatus
);

create table if not exists friends
(
    friendship_id        int generated by default as identity primary key,
    user_id              int REFERENCES users (user_id),
    friend_id            int REFERENCES users (user_id),
    friendship_status_id int REFERENCES friendship_status (status_id)
);

create table if not exists likes
(
    like_id        int generated by default as identity primary key,
    film_id        int REFERENCES films (film_id),
    like_from_user int REFERENCES users (user_id)
);

create table if not exists genre_names
(
    genre_id   int generated by default as identity primary key,
    genre_name Genre
);

create table if not exists film_genre_coupling
(
    coupling_id int generated by default as identity primary key,
    film_id     int REFERENCES films (film_id),
    genre_id    int REFERENCES genre_names (genre_id)
);